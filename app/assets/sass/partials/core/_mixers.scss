//--------
// Mixers
//
// Includes commonly used and useful mixins


//--------
// Applies default site padding.
@mixin site-pad() {
  padding: $page-padding;
  @include site-mq($fg-break-lg, min-width) {
    padding: $page-xl-padding;
    @content;
  }
  @content;
}


//--------
// Set element to varying common widths and center the element.
// Common widths are 'sitewide', 'lg', 'md', 'sm', 'xs' where 'sitewide' is 100% of the window and other modifiers map
// directly to breakpoint width variables in _grid.scss
//
// @mod       Modifier string that determines element width
// @xl        Support extra large breakpoint
// @pad       Pad the element with the default global padding in _config.scss
@mixin site-width($mod: 'sitewide', $xl: false, $pad: false) {
  margin: 0 auto;
  @if $mod == 'sitewide' {
    max-width: 100%;
  }
  @else if $mod == 'lg' {
    max-width: $fg-break-lg;
  }
  @else if $mod == 'md' {
    max-width: $fg-break-md;
  }
  @else if $mod == 'sm' {
    max-width: $fg-break-sm;
  }
  @else if $mod == 'xs' {
    max-width: $fg-break-xs;
  }

  // Support XL breakpoint
  @if $xl == true {
    @include site-mq($fg-break-lg, min-width) {
      max-width: $fg-break-lg;
      @content;
    }
  }

  // Pad with site default
  @if $pad == true {
    @include site-pad() {
      @content;
    };
  }

  @content;
}


//--------
// Executes passed styles on a media query based on one of the site grid breakpoints.
// Site breakpoints are 'lg', 'md', 'sm', and 'xs' where values modifiers map directly to breakpoint width variables
// in _grid.scss. If a number is passed, breakpoint maps directly to the width at a target column defined in
// _grid.scss.
//
// @bp        Modifier string that determines element width
// @mode      Changes the min/max width of the breakpoint
@mixin site-mq($bp, $mode: max-width) {
  @if $bp == 'lg' {
    @media only screen and ($mode: $fg-break-lg) {
      @content;
    }
  }
  @else if $bp == 'md' {
    @media only screen and ($mode: $fg-break-md) {
      @content;
    }
  }
  @else if $bp == 'sm' {
    @media only screen and ($mode: $fg-break-sm) {
      @content;
    }
  }
  @else if $bp == 'xs' {
    @media only screen and ($mode: $fg-break-xs) {
      @content;
    }
  }
  @else if type-of($bp) == number {
    @media only screen and ($mode: $bp) {
      @content;
    }
  }
}


//--------
// Apply a breakpoint mixin with specific min or max and min parameters.
//
// @min       The min width
// @max       The max width
@mixin breakpoint($min: false, $max: false) {
  @if ($min != false and $max != false) {
    @media only screen and (min-width: $min) and (max-width: $max) {
      @content;
    }
  }
  @else if ($min != false and $max == false) {
    @media only screen and (min-width: $min) {
      @content;
    }
  }
  @else if ($max != false and $min == false) {
    @media only screen and (max-width: $max) {
      @content;
    }
  }
}


//--------
// Toggle element visibility
// When invisible element is still available for screenreaders.
//
// @switch        Modifier strings: 'hide'/'show'
@mixin elm-toggle($switch) {
  @if ($switch == 'hide') {
    border: 0;
    clip: rect(0 0 0 0);
    height: 1px;
    margin: -1px;
    overflow: hidden;
    padding: 0;
    position: absolute;
    width: 1px;
  } @else if ($switch == 'show') {
    clip: auto;
    height: auto;
    margin: 0;
    overflow: visible;
    position: static !important;
    width: auto;
  }
}


//--------
// Clearfix element
// The tried and true clearfix hack allows us to contain floats without resorting to presentational markup.
@mixin clearfix() {
  &:before,
  &:after {
    content: "";
    display: table;
  }
  &:after {
    clear: both;
  }
}


//--------
// Vendor prefixing
// Useful for newer CSS3 properties to increase compatibility
//
// @property        A CSS3 property
// @value           The value to be set on the property
@mixin css3($property, $value) {
  @each $prefix in -webkit-, -moz-, -ms-, -o-, '' {
    #{$prefix}#{$property}: $value;
  }
}


//--------
// Create navigation list
// Strip an unordered list of its formatting so as to display items horizontally
@mixin navigation-list() {
  list-style-type: none;
  padding: 0;
  margin: 0;
  overflow: hidden;
  > li {
    display: block;
    float: left;
    &:last-child {
      margin-right: 0;
    }
  }
}


//--------
// Text overflow
// Truncate text with an ellipsis. Can be used on block or inline-block elements only.
@mixin text-truncate() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}


//--------
// Gradient border
// Creates a border with a gradient
// Usage: @include border-gradient('top-bottom', 0 1px 0 0, solid, $default-border-color, $default-gradient-border-color);
//
// @mod         Direction of gradient ('top-bottom' or 'left-right')
// @width       Border width
// @style       Border style
// @color1      Starting color
// @color2      Ending color
@mixin border-gradient($mod, $width, $style, $color1: black, $color2: rgba(0, 0, 0, 0)) {
  border-width: $width;
  border-style: $style;
  @if ($mod == 'top-bottom') {
    -webkit-border-image:
    -webkit-gradient(linear, 0 100%, 0 0, from($color1), to($color2)) 1 100%;
    -webkit-border-image:
    -webkit-linear-gradient(bottom, $color1, $color2) 1 100%;
    -moz-border-image:
    -moz-linear-gradient(bottom, $color1, $color2) 1 100%;
    -o-border-image:
    -o-linear-gradient(bottom, $color1, $color2) 1 100%;
    border-image:
    linear-gradient(to top, $color1, $color2) 1 100%;
  } @else if ($mod == 'left-right') {
    -webkit-border-image:
    -webkit-gradient(linear, 0 100%, 0 0, from($color1), to($color2)) 1 100%;
    -webkit-border-image:
    -webkit-linear-gradient(right, $color1, $color2) 1 100%;
    -moz-border-image:
    -moz-linear-gradient(right, $color1, $color2) 1 100%;
    -o-border-image:
    -o-linear-gradient(right, $color1, $color2) 1 100%;
    border-image:
    linear-gradient(to right, $color1, $color2) 1 100%;
  }
}
